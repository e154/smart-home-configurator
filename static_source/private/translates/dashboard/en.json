{
  "yes": "Yes",
  "no": "No",
  "Add": "Add",
  "true": "True",
  "false": "False",
  "no mater": "No mate",
  "Cancel": "Cancel",
  "Submit": "Submit",
  "Save": "Save",
  "Create": "Create",
  "Delete": "Delete",
  "Update": "Update",
  "Close": "Close",
  "Copy": "Copy",
  "Created at": "Created at",
  "Updated at": "Updated at",
  "Configurator": "Configurator",
  "Nodes": "Nodes",
  "All nodes": "All nodes",
  "Add new": "Add new",
  "Main Menu": "Main menu",
  "go to": "Go to",
  "Sign out": "Sign out",
  "Create start event": "Create start event",
  "Create end event": "Create end event",
  "Create gateway": "Create gateway",
  "Create flow link": "Create flow link",
  "Create task": "Create task",
  "No data": "No data",
  "loading...": "Loading...",
  "full screen": "Full screen",
  "set image": "Set image",
  "Account": "Account",
  "Maps": "Maps",
  "Devices": "Devices",
  "Scripts": "Scripts",
  "Logs": "Logs",
  "Notifr": "Notifr",
  "Flow": "Flow",
  "Workflow": "Workflow",
  "All templates": "All templates",
  "All notifications": "All notifications",
  "All items": "All items",
  "All users": "All users",
  "All roles": "All roles",
  "Add template": "Add template",
  "Add role": "Add role",
  "Add user": "Add user",
  "All scripts": "All scripts",
  "All workflow": "All workflow",
  "All maps": "All maps",
  "All flow": "All flow",
  "All device": "All device",
  "upload": "Upload",
  "archive": "Archive",
  "upload file": "Upload file",
  "No scripts": "No scripts",
  "No actions": "No actions",
  "No states": "No states",
  "Without group": "Without group",
  "empty": "Empty",
  "node": {
    "package_name": "Nodes",
    "name": "Name",
    "show_form": "Node",
    "new_form": "New node",
    "index_form": "Node list",
    "edit_form": "Node form",
    "description": "Description",
    "ip": "Ip",
    "port": "Port",
    "created_at": "Created at",
    "updated_at": "Update at",
    "enabled": "enabled",
    "disabled": "disabled",
    "status": "Status",
    "login": "Login",
    "password": "Password",
    "password_repeat": "Password repeat",
    "set_password": "Specify a password in both fields",
    "state": {
      "disconnected": "Disconnected",
      "connected": "Connected",
      "wait": "Wait",
      "enabled": "Enabled",
      "disabled": "Disabled",
      "error": "Error"
    },
    "help1": {
      "title": "Node",
      "message1": "A node is the main way of communication between a software package and executable devices (device). The agent allows you to connect devices to the software package via the Internet, wifi, secure channels (openvpn, etc)"
    }
  },
  "device": {
    "package_name": "Devices",
    "device": "Device",
    "name": "Name",
    "sleep": "Sleep",
    "edit_form": "Device form",
    "new_form": "New device",
    "show_form": "Device",
    "index_form": "Device list",
    "baud": "baud (19200)",
    "slave_id": "slave id",
    "data_bits": "data bits",
    "stop_bits": "stop bits",
    "parity": "Parity",
    "address_port": "address:port",
    "user": "Пользователь",
    "password": "Пароль",
    "address": "Address (device group if null)",
    "mqtt_address": "Address",
    "group": "Group",
    "tty": "/dev/tty...",
    "description": "Description",
    "stop_bite": "Stop bite",
    "enabled": "Enabled",
    "disabled": "Disabled",
    "default": "Default",
    "node": "Node",
    "timeout": "Timeout",
    "created_at": "Created at",
    "updated_at": "Update at",
    "actions": "Actions",
    "statuses": "Statuses",
    "yes": "Yes",
    "no": "No",
    "is_group": "Is group",
    "script": "Script",
    "type": "Type",
    "parent": "Parent",
    "no_params": "No params",
    "zigbee2mqtt_device": "Zigbee2mqtt device",
    "help1": {
      "title": "Device",
      "message1": "The device object describes a smart device, both real and virtual, created by the user (for example, a temperature and humidity sensor). Devices are divided by type (example, default - a virtual device).",
      "message2": "Groups are required for devices of type modbus_rtu.",
      "message3": "Connecting devices requires a node / agent acting as an intermediary in communication between the software package and the device."
    },
    "action": {
      "help1": {
        "title": "Action",
        "message1": "An Action is a property of an object (device) that describes its capabilities. A device may not have any actions at all (example, temperature and humidity sensor). The device can also include the properties and actions of several sensors and devices at once (for example, a door open sensor + motion sensor + load control relay)",
        "message2": "The action has a name, ID is a unique identifier within all actions for calling from scripts using the doAction (id) command, and an executable script (javascript, coffescript, typescript) describes the business logic of the action (example, enable / disable, send a notification, save state )"
      },
      "add": "Add action",
      "name": "Name",
      "script": "Script",
      "start_addr": "Start address",
      "col_cells": "Number of cells",
      "function": "Function",
      "direction": "Direction",
      "result_type": "Type of the result of the command",
      "command": "Command",
      "description": "Description",
      "inside": "Inside",
      "outside": "Outside",
      "all": "All",
      "add_script": "Add script",
      "show_script": "Show script",
      "edit_script": "Edit script",
      "menu": "Menu",
      "do_action": "Do action"
    },
    "status": {
      "help1": {
        "title": "Status",
        "message1": "Status - this is a property of the device in which it can be at a time (example, on or off). With the help of states, you can monitor the status of devices and keep an event log.",
        "message2": "A device may not have statuses, but such devices are less informative."
      },
      "name": "Status",
      "delete": "Delete",
      "system_name": "System name",
      "description": "Description",
      "action": "Action",
      "add": "Add state"
    }
  },
  "device_action": {
    "package_name": "Device Actions"
  },
  "device_state": {
    "package_name": "Device Status"
  },
  "total items": "Total",
  "workflow": {
    "name": "Name",
    "description": "Description",
    "status": "Status",
    "enabled": "Enabled",
    "disabled": "Disabled",
    "created_at": "Created at",
    "updated_at": "Update at",
    "package_name": "Workflow access",
    "index_form": "Workflow list",
    "show_form": "Show Workflow",
    "new_form": "New Workflow",
    "edit_form": "Workflow form",
    "scenarios": "Scenarios",
    "scripts": "Scripts",
    "scenario": {
      "scenario": "Scenario",
      "name": "Name",
      "system_name": "System name",
      "do_scenario": "Do scenario",
      "add": "Add",
      "scripts_title": "Scenario scripts"
    },
    "help1": {
      "title": "workflow",
      "message1": "Business process (workflow) - a process that combines scenarios in order to control the flow of tasks (flow).",
      "message2": "For example, you can create a process (workflow): country_house (country house), and three scenarios for it: 1) nobody is at home (the house is on guard); 2) weekday; 3) weekend."
    },
    "help2": {
      "title": "Workflow scenario",
      "message1": "The scenario describes in detail how tasks should be solved in the context of a workflow",
      "message2": "The script can use scripts, as a rule, to store the global variables associated with the current task, as well as global variables responsible for storing task states (flow)",
      "message3": "There must be at least one scenario so that the workflow can work. Combining scenarios is not possible, there can be only one active.",
      "message4": "For example, you can create a process (workflow): country_house (country house), and three scenarios for it: 1) nobody is at home (the house is on guard); 2) weekday; 3) weekend."
    },
    "help3": {
      "title": "Workflow scripts",
      "message1": "Workflow can use scripts, usually to store variables responsible for storing task states (flow) or senaria (scenario)"
    }
  },
  "flow": {
    "edit": "Edit",
    "worker": "Worker",
    "workers": "Workers",
    "name": "Name",
    "description": "Description",
    "status": "Status",
    "enabled": "Enabled",
    "disabled": "Disabled",
    "created_at": "Created at",
    "updated_at": "Update at",
    "workflow": "Workflow",
    "remove_worker": "Remove worker",
    "do_worker": "Do worker",
    "add_worker": "Add worker",
    "elements": "Elements",
    "show_form": "Show form",
    "new_form": "New form",
    "index_form": "Index form",
    "subscriptions": "Subscriptions",
    "find_topic": "Find topic",
    "mqtt_topic": "mqtt topic",
    "add_topic": "Add topic",
    "find_subscription": "Topics",
    "find_zigbee2mqtt_devices": "Zigbee2mqtt devices",
    "zigbee2mqtt_device": "Zigbee2mqtt device",
    "zigbee2mqtt": "Zigbee2mqtt",
    "add_device": "Add device",
    "element": {
      "title": "Title",
      "script": "Script",
      "group": "Group",
      "remove": "Remove element",
      "description": "Description",
      "menu": "Menu",
      "add_script": "Add script",
      "show_script": "Show script",
      "edit_script": "Edit script",
      "direction": "Direction",
      "flow_link": "Flow link",
      "flow": "Flow",
      "type": {
        "event": "Event",
        "task": "Task",
        "connector": "Connector"
      }
    },
    "package_name": "Flows",
    "help1": {
      "title": "Flows",
      "message1": "A process (flow) is a system of rules describing the business logic of a device or group of devices tied to a specific scenario (scenario) of a workflow.",
      "message2": ""
    }
  },
  "worker": {
    "action_name": "Action name",
    "name": "Name",
    "time": "Time",
    "enabled": "Enabled",
    "disabled": "Disabled",
    "status": "Status",
    "cron": "Cron",
    "package_name": "Workers"
  },
  "script": {
    "package_name": "Scripts",
    "name": "Name",
    "description": "Description",
    "source": "Source",
    "lang": "Language",
    "created_at": "Created at",
    "updated_at": "Update at",
    "execute": "Execute",
    "show_form": "Show form",
    "edit_form": "Edit form",
    "new_form": "New form",
    "index_form": "Script list",
    "add_new": "Add new",
    "script_edit": "Script edit",
    "browser": "Browser",
    "access_list": {
      "execute script": "Do script"
    },
    "editor": {
      "file_list": "File list",
      "body": "Body"
    },
    "help1": {
      "title": "Script",
      "message1": "A script is a program or sequence of actions created to automatically complete a task.",
      "message2": "Scripts are used in workflow, scripts (scenario), processes (flow), etc. Scripts are written in Javascript, also CoffeeScript and TypeScript are translated in JavaScript. This is the main way to describe the logic in the software package."
    }
  },
  "log": {
    "level": "Level",
    "body": "Body",
    "start_date": "From",
    "end_date": "To",
    "created_at": "Created at",
    "index_form": "Log list",
    "package_name": "Log list"
  },
  "notifr": {
    "markers": "Markers",
    "refresh": "Refresh",
    "error": "Error",
    "status": "Status",
    "email": "Email",
    "sms": "Sms",
    "push": "Push",
    "body": "Body",
    "email_system": "Notify system",
    "type": "Type",
    "notifications": "Notifications",
    "new_notification": "New notification",
    "refrash_list": "Refrash list",
    "add_template": "Add template",
    "email_template": "Email template",
    "element_of_template": "Element of template",
    "name": "Name",
    "system_name": "System name",
    "description": "Description",
    "created_at": "Created at",
    "updated_at": "Updated at",
    "address": "Address",
    "title": "Title",
    "items": "Items",
    "preview": "Preview",
    "source_code": "Source code",
    "package_name": "Notifr",
    "template": "Template",
    "send": "Send",
    "settings": "Settings",
    "settings_email_auth": "Auth",
    "settings_email_pass": "Password",
    "settings_email_port": "Port",
    "settings_email_sender": "Sender",
    "settings_email_smtp": "smtp server",
    "settings_mb_access_key": "Access key",
    "settings_mb_name": "Name",
    "settings_tw_auth_token": "Auth token",
    "settings_tw_from": "From",
    "settings_tw_sid": "SID",
    "settings_telegram_token": "Token",
    "settings_slack_token": "Token",
    "settings_slack_user_name": "User name",
    "messagebird": "Messagebird",
    "twilio": "Twilio",
    "telegram": "Telegram",
    "site": "website",
    "slack": "Slack",
    "body_type": "Body type",
    "body_type_plain": "plain",
    "body_type_template": "template",
    "help1": {
      "title": "Notifications",
      "message1": "List of all notifications and status sent by the software package."
    },
    "help2": {
      "title": "Templates",
      "message1": "A message template is a ready-made text that the software package can use to automate the notification process by email or using SMS messages. Templates save time because You do not have to type a standard message every time.",
      "message2": "For example, you can create a message about the opening of a garage door, which will warn you in advance. Or you can create a message template about the operation of motion sensors when the system is in the armed state."
    },
    "help3": {
      "title": "Template",
      "message1": "The template is formed from elements (item), and markers - variables that are responsible for filling with the actual value before sending, the system name should be unique within the templates, as it is used when choosing a template.",
      "message2": ""
    },
    "help4": {
      "title": "Items",
      "message1": "Element (item) - the building block of the template, which is strictly dependent on the parent element",
      "message2": ""
    }
  },
  "map": {
    "name": "Name",
    "show_form": "Map",
    "edit_form": "Map form",
    "new_form": "New map",
    "index_form": "Map list",
    "zoom": "Zoom",
    "preview": "Preview",
    "current_layer": "Current layer",
    "layers": "Layers",
    "add_element": "Add element",
    "description": "Description",
    "created_at": "Created at",
    "settings": "Settings",
    "main_window": "Main window",
    "callback": "Callback",
    "updated_at": "Updated at",
    "file_manager": "File manager",
    "add_layer": "Add layer",
    "element_state_text": "Show element state text",
    "element_option_text": "Show element option text",
    "zone": "Zone",
    "layer": {
      "name": "Name",
      "status": "Status",
      "enabled": "Enabled",
      "disabled": "Disabled",
      "hidden": "Hidden",
      "created_at": "Created at",
      "updated_at": "Updated at",
      "description": "Description"
    },
    "element": {
      "name": "Name",
      "system_name": "System name",
      "status": "Status",
      "enabled": "Enabled",
      "disabled": "Disabled",
      "frozen": "Frozen",
      "type": "Type",
      "hidden": "Hidden",
      "image": "Image",
      "text": "Text",
      "device": "Device",
      "action": "Action",
      "script": "Script",
      "created_at": "Created at",
      "updated_at": "Updated at",
      "description": "Description",
      "prototype": {
        "name": "Name",
        "style": "Style",
        "image": "Image",
        "text": "Text",
        "state": "State",
        "device": {
          "image": "Image",
          "action": "Action",
          "state": "State",
          "no_actions": "No actions",
          "tab": {
            "base": "Base",
            "states": "States",
            "actions": "Actions"
          }
        }
      }
    },
    "package_name": "Maps"
  },
  "widget": {
    "name": {
      "swap": "swap",
      "memory": "memory",
      "app_memory": "App memory",
      "cpu": "cpu",
      "nodes": "nodes",
      "flows": "flows",
      "workflows": "workflows",
      "devices": "devices",
      "uptime": "uptime",
      "disk": "disk",
      "mqtt": "mqtt",
      "configurator_version": "configurator version",
      "server_version": "server version",
      "history": "History"
    },
    "memory": {
      "total": "Total",
      "free": "Free",
      "percent": "Percent"
    },
    "cpu": {
      "mhz": "mhz",
      "cores": "Cores",
      "max": "Max"
    },
    "uptime": {
      "total": "Total",
      "idle": "Idle"
    },
    "nodes": {
      "total": "Total",
      "error": "Error",
      "online": "Online",
      "disabled": "Disabled"
    },
    "flows": {
      "total": "Total",
      "error": "Error",
      "online": "Online",
      "disabled": "Disabled"
    },
    "workflows": {
      "total": "Total",
      "error": "Error",
      "online": "Online",
      "disabled": "Disabled"
    },
    "devices": {
      "total": "Total",
      "error": "Error",
      "online": "Online",
      "disabled": "Disabled"
    },
    "app_memory": {
      "total_alloc": "Total alloc",
      "heap_alloc": "Heap alloc",
      "alloc": "Alloc",
      "sys": "Sys"
    },
    "mqtt": {
      "client": {
        "connected_total": "Total",
        "disconnected_total": "Disconnected",
        "inactive_current": "Inactive"
      }
    },
    "version": {
      "version": "version",
      "revision": "revision",
      "revision_url": "revision_url",
      "generated": "generated",
      "developers": "developers",
      "build_num": "build_num",
      "docker_image": "docker_image"
    }
  },
  "uptime": {
    "days": "Days",
    "hours": "Hours",
    "minutes": "Minutes",
    "seconds": "Seconds",
    "online_for": "Online"
  },
  "dashboard": {
    "name": "Dashboard",
    "add_widget": "Add widget",
    "package_name": "Dashboard"
  },
  "user": {
    "language": "Language",
    "new_form": "New user",
    "index_form": "User list",
    "show_form": "User detail",
    "edit_form": "User edit",
    "nickname": "Nickname",
    "add_new": "New user",
    "image": "Avatar",
    "status": "Status",
    "active": "Active",
    "blocked": "Blocked",
    "autograph": "Autograph",
    "phone1": "Phone1",
    "phone2": "Phone2",
    "telegram": "Telegram",
    "slack": "Slack",
    "role": "Role",
    "first_name": "First name",
    "last_name": "Last name",
    "email": "Email",
    "password": "Password",
    "password_repeat": "Password repeat",
    "set_password": "Specify a password in both fields",
    "history": "History",
    "sign_in_count": "Sign in count",
    "last_sign_in_at": "Last sign in at",
    "last_sign_in_ip": "Last sign in ip",
    "current_sign_in_at": "Current sign in at",
    "current_sign_in_ip": "Current sign in ip",
    "created_at": "Created at",
    "updated_at": "Update at",
    "Sign in": "Sign in",
    "help1": {
      "title": "Users",
      "message1": "Users - From a system perspective, a user is not necessarily a person. A user is an object that has certain rights and can run a command through a REST request.",
      "message2": "There is one user in the system with unlimited rights. This is the superuser or system administrator."
    },
    "menu": {
      "show": "Show",
      "edit": "Edit",
      "block": "Block",
      "unblock": "Unblock",
      "remove": "Remove"
    },
    "package_name": "Users",
    "access_list": {
      "view role access list": "view role access list",
      "update role access list info": "update role access list info"
    }
  },
  "role": {
    "new_form": "New role",
    "add_new": "Add new",
    "index_form": "Role list",
    "show_form": "Role",
    "edit_form": "Role edit",
    "permissions_form": "Permissions form",
    "description": "Description",
    "created_at": "Created at",
    "updated_at": "Update at",
    "parent": "Parent",
    "children": "Children",
    "name": "Name",
    "package_name": "Roles",
    "help1": {
      "title": "Roles",
      "message1": "RBAC - Access control to the software package is based on roles. Role - are assigned to users, as a result of which users of the complex receive certain permissions through roles."
    },
    "help2": {
      "title": "Roles",
      "message1": "Role inheritance allows you to combine permissions with a parent role."
    }
  },
  "Users": "Users",
  "Roles": "Roles",
  "Menu": "Menu",
  "Permissions": "Permissions",
  "permission": {
    "warning_message": "Attention settings related to security",
    "read": "Read",
    "create": "Create",
    "update": "Update",
    "delete": "Delete",
    "manage": "Manage",
    "upload": "Upload",
    "package_name": "Access rules",
    "read_map": "Read map",
    "create_map": "Create map",
    "update_map": "Update map",
    "delete_map": "Delete map",
    "manage_map": "Manage map",
    "read_map_element": "Read map element",
    "create_map_element": "Create map element",
    "update_map_element": "Update map element",
    "delete_map_element": "Delete map element",
    "manage_map_element": "Manage map element",
    "read_map_layer": "Read map layer",
    "create_map_layer": "Create map layer",
    "update_map_layer": "Update map layer",
    "delete_map_layer": "Delete map layer",
    "manage_map_layer": "Manage map layer",
    "read_notifr_template": "Read notifr template",
    "create_notifr_template": "Create notifr template",
    "update_notifr_template": "Update notifr template",
    "delete_notifr_template": "Delete notifr template",
    "manage_notifr_template": "Manage notifr template",
    "preview_notifr": "Preview notifr",
    "read_notifr_item": "read notifr item",
    "create_notifr_item": "create notifr item",
    "update_notifr_item": "update notifr item",
    "delete_notifr_item": "delete notifr item",
    "manage_notifr_item": "manage notifr item",
    "exec_script": "Exec script",
    "read_role": "Read role",
    "create_role": "Create role",
    "update_role": "Update role",
    "delete_role": "Delete role",
    "read_role_access_list": "Read role access list",
    "update_role_access_list": "Update role access list",
    "update_status": "Update status",
    "signin": "Sign in",
    "signout": "Sign out",
    "recovery": "Recovery password",
    "reset": "Reset password",
    "create_script": "Create script",
    "delete_script": "Delete script",
    "update_script": "Update script",
    "read_script": "Read script",
    "show_notify": "Show notify",
    "create_notify": "Create notify",
    "repeat_notify": "Repeat notify",
    "delete_notify": "Delete notify",
    "create_mobile": "Create mobile client token",
    "delete_mobile": "Delete mobile client token",
    "read_gate": "Read gate settings",
    "update_gate": "Update gate settings",
    "copy": "Copy",
    "read_config": "Read config",
    "update_config": "Update config",
    "preview": "Preview",
    "close_client": "Close client",
    "close_topic": "Close topic",
    "publish": "Publish",
    "rename_device": "Rename device",
    "help1": {
      "title": "Access rights",
      "message1": "Access settings (permissions) - delegate access privileges only to the information or methods of the complex, which is necessary for the role to work."
    },
    "warn1": {
      "title": "Attention",
      "message1": "Security Settings"
    }
  },
  "access_list": {
    "package_name": "Access rule list"
  },
  "image": {
    "package_name": "Working with images"
  },
  "ws": {
    "package_name": "Web sockets",
    "access_list": {
      "stream access": "Access to the information system"
    }
  },
  "auth": {
    "package_name": "Authorization"
  },
  "scenarios": {
    "package_name": "Scenarios"
  },
  "swagger": {
    "package_name": "Swagger",
    "index_form": ""
  },
  "gate": {
    "package_name": "Gate",
    "index_form": "Gate settings",
    "address": "Address",
    "gate_server_token": "Access toke",
    "status": "Status",
    "enabled": "enabled",
    "disabled": "disabled",
    "mobile_list": "Mobile list",
    "add_mobile": "Add mobile",
    "this_server": "This server",
    "mobile": "Mobile",
    "help1": {
      "title": "Gate",
      "message1": "The gateway has two purposes 1) Providing access to the software package for mobile devices from the Internet 2) Proxying calls from amazon Alexa.",
      "message2": "You do not have to deploy your gateway. You can connect to the free and secure gateway https://gate.e154.ru, the “access token” is the token received during registration on the gateway, it is responsible for storing mobile tokens, the “mobile token” is used to connect mobile clients to this server, it determines the membership of the server, each call to the gateway must be signed with a mobile token, the gateway determines the routing and sends a request to the desired software package.",
      "message3": "For example, enter https://gate.e154.ru in the field, if you do not have an Access Token, leave this field empty and click update. After successful connection, the 'Access Token' will be filled. Then you can add one client, for a mobile application, and one more for Alexa skill."
    },
    "warn1": {
      "title": "Attention",
      "message": "The software package should not expose any ports to the Internet. This gateway is used for this."
    }
  },
  "notify": {
    "package_name": "Notify"
  },
  "template": {
    "package_name": "Template"
  },
  "map_zone": {
    "package_name": "Map zone"
  },
  "mqtt": {
    "package_name": "Mqtt",
    "index_form": "Mqtt client list",
    "connected_at": "Connected at",
    "disconnected_at": "Disconnected at",
    "client_show": "Mqtt client",
    "publish": "Publish message",
    "topic_name": "Topic name",
    "payload": "Payload",
    "topic": {
      "qos": "QOS",
      "name": "Name",
      "created_at": "Created at"
    },
    "client": {
      "detail": "Detail",
      "session": "Session",
      "client_id": "Client id",
      "clean_session": "Clean session",
      "keep_alive": "Keep alive",
      "local_addr": "Local addr",
      "username": "Username",
      "password": "Password",
      "remote_addr": "Remote addr",
      "will_flag": "Will flag",
      "will_payload": "Will payload",
      "will_qos": "Will qos",
      "will_retain": "Will retain",
      "will_topic": "Will topic",
      "connected_at": "Connected at",
      "disconnected_at": "Disconnected at",
      "await_rel_len": "Await rel len",
      "inflight_len": "Inflight len",
      "max_await_rel": "Max await rel",
      "max_inflight": "Max inflight",
      "max_msg_queue": "Max msg queue",
      "msg_delivered_total": "Msg delivered total",
      "msg_dropped_total": "Msg dropped total",
      "msg_queue_len": "msg queue len",
      "status": "Status",
      "subscriptions": "Subscriptions"
    },
    "menu": {
      "close": "Close",
      "unsubscribe": "Unsubscribe"
    },
    "help1": {
      "title": "Mqtt",
      "message1": "MQTT is a simplified network protocol running on top of TCP / IP, oriented for the exchange of messages between devices on the principle of publisher-subscriber.",
      "message2": "The protocol focuses on ease of use, low load on communication channels, work in the conditions of constant loss of communication, easy integration into any system. The main purpose is to work with telemetry from various sensors, devices, using a subscriber template allows devices to communicate and publish messages that were not previously known or predetermined, in particular, the protocol does not impose restrictions on the format of the transmitted data."
    }
  },
  "menu": {
    "index_form": "Menu"
  },
  "zigbee2mqtt": {
    "package_name": "zigbee2mqtt",
    "index_form": "Zigbee2mqtt list",
    "base_topic": "Base topic",
    "created_at": "Created at",
    "updated_at": "Update at",
    "show": "Bridge",
    "status": "Status",
    "permit_join": "permit join",
    "online": "online",
    "offline": "offline",
    "login": "login",
    "name": "Name",
    "edit_form": "Edit bridge",
    "new_form": "New bridge",
    "password": "Password",
    "password_repeat": "Password repeat",
    "set_password": "Specify a password in both fields",
    "devices": "Devices",
    "no_devices": "No devices",
    "network_map": "Network map",
    "soft_reset": "Soft reset",
    "on": "On",
    "off": "Off",
    "device": {
      "id": "id",
      "name": "name",
      "model": "model",
      "description": "description",
      "manufacturer": "manufacturer",
      "functions": "functions",
      "status": "status",
      "active": "active"
    },
    "help1": {
      "title": "Zigbee2mqtt",
      "message1": "The bridge links events and allows you to control Zigbee devices through MQTT. Thus, you can integrate your Zigbee devices with the smart home software package.",
      "message2": "If you are not familiar with Zigbee terminology, be sure to read the documentation at the link below."
    }
  },
  "history": {
    "list": "History list",
    "type": "Type",
    "device": "Device",
    "description": "Description",
    "created_at": "Created at"
  },
  "alexa": {
    "index_form": "Alexa skill list",
    "show_form": "Skill",
    "description": "Description",
    "created_at": "Created at",
    "updated_at": "Update at",
    "status": "Status",
    "enabled": "enabled",
    "disabled": "disabled",
    "skill_id": "Skill id",
    "on_launch": "On launch",
    "on_session_ended": "On session ended",
    "action": {
      "menu": "menu",
      "script": "script",
      "add_script": "Add script",
      "show_script": "Show script",
      "edit_script": "Edit script"
    },
    "intents":"Intents",
    "intent_name": "Intent name",
    "intent_description": "Intent description",
    "intent_script": "Intent script",
    "add_intent": "Add intent",
    "endpoint": "Endpoint (example)",
    "help1": {
      "title": "Skills",
      "message": "With the help of Alexa skills, you can perform any action within the software system. You can turn on the light, send a notification, email, SMS, open or close the garage door, a report on the status of security sensors or the current temperature, any action that can be implemented programmatically in this system.\n\nThe address of the console for setting skills:"
    },
    "warn1": {
      "title": "Endpoint",
      "message1": "A skill system requires a working and configured gateway. The access point to all skills consists of two values: 1) gateway address; 2) mobile access token.",
      "message2": "For example: https://gate.e154.ru/alexa?server_access_token=nQJb-vulnfzgTVxrJrUjAmWTe-1586355603-06150e784df91110a1eb42d11498b9937b442944fae26117272204934de53a14.",
      "message3": "A sample link must be specified in the alexa developer console as endpoint."
    }
  }
}
